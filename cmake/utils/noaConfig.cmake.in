# Configuration file for noa.
@PACKAGE_INIT@

# Build info.
if(NOT noa_FIND_QUIETLY)
    message(STATUS "Found noa: ${PACKAGE_PREFIX_DIR} (version ${noa_VERSION})")
    list(APPEND CMAKE_MESSAGE_INDENT "  ")

    message(STATUS "Built with CMAKE_BUILD_TYPE=@CMAKE_BUILD_TYPE@")
    message(STATUS "Built with CMAKE_GENERATOR=@CMAKE_GENERATOR@")
    message(STATUS "Built with CMAKE_C_COMPILER=@CMAKE_C_COMPILER@")
    message(STATUS "Built with CMAKE_CXX_COMPILER=@CMAKE_CXX_COMPILER@")
    if (@NOA_ENABLE_CUDA@)
        message(STATUS "Built with CMAKE_CUDA_COMPILER=@CMAKE_CUDA_COMPILER@")
        message(STATUS "Built with CMAKE_CUDA_HOST_COMPILER=@CMAKE_CUDA_HOST_COMPILER@")
        message(STATUS "Built with CMAKE_CUDA_ARCHITECTURES=@CMAKE_CUDA_ARCHITECTURES@")
    endif ()
    message(STATUS "Built with NOA_CPU_OPENMP=@NOA_CPU_OPENMP@")
    message(STATUS "Built with NOA_ENABLE_TIFF=@NOA_ENABLE_TIFF@")
    list(POP_BACK CMAKE_MESSAGE_INDENT)
endif()

# Find dependencies.
include(CMakeFindDependencyMacro)
find_dependency(Threads REQUIRED)

if (NOT TARGET fmt::fmt)
    find_dependency(fmt REQUIRED CONFIG PATHS ${PACKAGE_PREFIX_DIR}/${CMAKE_INSTALL_LIBDIR}/cmake NO_DEFAULT_PATH)
endif ()

if (NOT TARGET half::half)
    find_dependency(half REQUIRED CONFIG PATHS ${PACKAGE_PREFIX_DIR}/${CMAKE_INSTALL_LIBDIR}/cmake NO_DEFAULT_PATH)
endif ()

if (@NOA_ENABLE_TIFF@ AND NOT TARGET TIFF::TIFF)
    find_dependency(TIFF REQUIRED)
endif ()

if (@NOA_CPU_OPENMP@ AND NOT TARGET OpenMP::OpenMP_CXX)
    find_dependency(OpenMP 4.5 REQUIRED)
endif ()

# CUDA backend dependencies:
if (@NOA_ENABLE_CUDA@)
    # Verify CUDA language is enabled.
    get_property(_languages GLOBAL PROPERTY ENABLED_LANGUAGES)
    if(NOT "CUDA" IN_LIST _languages)
        message(FATAL_ERROR
            "noa was built with CUDA support, but CUDA language is not enabled.\n"
            "Add 'CUDA' to your project() LANGUAGES or call enable_language(CUDA)."
        )
    endif()

    # Find matching CUDAToolkit version.
    find_dependency(CUDAToolkit @CUDAToolkit_VERSION@ REQUIRED)

    # Verify CUDAToolkit version compatibility.
    if(CUDAToolkit_VERSION VERSION_LESS @CUDAToolkit_VERSION_MAJOR@.@CUDAToolkit_VERSION_MINOR@)
        message(WARNING
            "noa was built with CUDA Toolkit ${CUDAToolkit_VERSION}, "
            "but found version ${CUDAToolkit_VERSION}. "
            "This may cause compatibility issues."
        )
    endif()

    # Warn about separable compilation requirement.
    if(NOT DEFINED CMAKE_CUDA_SEPARABLE_COMPILATION)
        message(WARNING
            "CMAKE_CUDA_SEPARABLE_COMPILATION is not set.\n"
            "Targets linking to noa::noa should have CUDA_SEPARABLE_COMPILATION ON.\n"
            "Example: set_target_properties(your_target PROPERTIES CUDA_SEPARABLE_COMPILATION ON)"
        )
    endif()
endif ()

# Create the targets.
if(NOT TARGET noa::noa)
    include("${CMAKE_CURRENT_LIST_DIR}/noaTargets.cmake")
    if(NOT TARGET noa::noa)
        message(FATAL_ERROR "noa::noa target not defined after including noaTargets.cmake")
    endif()

    check_required_components(noa)
endif()
