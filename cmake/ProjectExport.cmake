# Exports the project for use by other CMake projects.
include(CMakePackageConfigHelpers)
include(GNUInstallDirs)
set(NOA_CONFIG_INSTALL_DIR "${CMAKE_INSTALL_LIBDIR}/cmake/noa")

# Generate the config file that will be included when a project does find_package(noa).
# This file includes noaTargets.cmake (generated by CMake) which defines our exported targets,
# and finds and imports our dependencies so project can link to them transitively.
configure_package_config_file(
    "${PROJECT_SOURCE_DIR}/cmake/utils/noaConfig.cmake.in"
    "${PROJECT_BINARY_DIR}/noaConfig.cmake"
    INSTALL_DESTINATION "${NOA_CONFIG_INSTALL_DIR}"
)

# Generate the version file for package compatibility checking, adding support for find_package(noa <version>).
write_basic_package_version_file(
    "${PROJECT_BINARY_DIR}/noaConfigVersion.cmake"
    VERSION ${NOA_VERSION}
    COMPATIBILITY SameMajorVersion # semantic versioning
)

# Install both config files.
install(
    FILES
    "${PROJECT_BINARY_DIR}/noaConfig.cmake"
    "${PROJECT_BINARY_DIR}/noaConfigVersion.cmake"
    DESTINATION "${NOA_CONFIG_INSTALL_DIR}"
)

# Export all targets that were installed with EXPORT noa.
# This generates noaTargets.cmake which defines imported targets in the noa:: namespace.
# Projects can then use find_package(noa) and link with target_link_libraries(... noa::noa).
install(
    EXPORT noa
    FILE noaTargets.cmake
    NAMESPACE noa::
    DESTINATION "${NOA_CONFIG_INSTALL_DIR}"
)
